;; Emacs 23より前のバージョンを利用しているときは
;; user-emacs-directory変数が未定義のため次の設定を追加
(when (> emacs-major-version 23)
  (defvar user-emacs-directory "~/.emacs.d"))

;;load-pathを追加する関数を定義
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory
	      (expand-file-name (concat user-emacs-directory path))))
	(add-to-list 'load-path default-directory)
	(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	    (normal-top-level-add-subdirs-to-load-path))))))
;;
(add-to-load-path "elisp" "conf" "public_repos")


;;; ロードパスの追加
(setq load-path (append
		 '("~/.emacs.d")
		 load-path))

;;; ローカルに合わせた環境の設定
(set-locale-environment nil)

;;; 画像ファイルを表示
(auto-image-file-mode t)

;;; メニューバーを消す
(menu-bar-mode -1)



(set-face-attribute 'default nil
:height 130)

(if window-system (progn
		    
;;; 文字色設定
		    (add-to-list 'default-frame-alist '(foreground-color . "White"))
;;; 背景色
		    (add-to-list 'default-frame-alist '(background-color . "DimGrey"))
		    
		    (add-to-list 'default-frame-alist '(cursor-color . "Black"))
))
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

;;対応する括弧を強調
(show-paren-mode t)


;php-mode
(autoload 'php-mode "php-mode")
(setq auto-mode-alist
(cons '("\\.php\\'" . php-mode) auto-mode-alist))
(setq php-mode-force-pear t)
(add-hook 'php-mode-user-hook
'(lambda ()
(setq php-manual-path "user/local/share/php/doc/html")
(setq php-manual-url "http://www.phppro.jp/phpmanual/")))


;css editing mode
(autoload 'css-mode "css-mode")
(setq auto-mode-alist
      (cons '("\\.css\\'" . css-mode) auto-mode-alist))
(setq cssm-indent-functioin #'cssm-c-style-indenter)

(require 'mmm-mode)
(setq mmm-global-mode 'maybe)
;(set-face-background 'mmm-default-submode-face nil)
(mmm-add-classes
'((embedded-css
:submode css-mode
:front "<style[^>]*>"
:back "</style>")))
(mmm-add-mode-ext-class nil "\\.html\\'" 'embedded-css)